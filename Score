// SPDX-License-Identifier: GPL-3.0
pragma solidity >0.7.6 <0.8.4;

contract Score {
 
    constructor() {
        owner = msg.sender;
    }
   
    address public owner;   //Variable setting owner's address

    mapping(address => uint256) scoreList; //mapping(datatype of the key => value)
   
    struct ScoreBoard {         //definition of object
        address addr;
        uint256 amount;
    }

    modifier onlyOwner {
        require ((msg.sender == owner), "Ownable: caller is not the owner"); 
             _;
        }


    ScoreBoard[] table;

    event scoreSet2(uint256, address indexed);  //indexing doesnt do anything to contract. It just helps search within data externally.

    function addScore(address addr, uint256 amount) onlyOwner public {
       scoreList[addr] = scoreList[addr] + amount;
       emit scoreSet2(amount, msg.sender);
    }


    function getScore() public view returns (uint256) {
        return scoreList[msg.sender];
    }

    function getUserScore(address user) public view returns (uint256){
        return scoreList[user];
    }

}
